version: '3'

services:
  db:  # Сервис PostgreSQL
    restart: always
    image: postgres
    env_file:  # Загрузка переменных окружения из файла .env
      - .env
    environment:  # Переменные окружения для PostgreSQL
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST: ${DB_HOST}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pg_data:/var/lib/postgresql/data/pgdata
    networks:  # Подключение к пользовательской сети drf_network
      - drf_network
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:  # Сервис Django-приложения
    build: .
    tty: true
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - '8000:8000'
    volumes:
      - .:/code
    depends_on:
      db:
        condition: service_healthy  # Запуск сервиса только после успешного прохождения healthcheck
    env_file:  # Загрузка переменных окружения из файла .env
      - .env
    networks:  # Подключение к пользовательской сети drf_network
      - drf_network

  redis:
    image: redis
    ports:
      - '6379:6379'

  celery:  # Сервис Celery worker
    build: .  # Сборка образа Docker из текущей директории (где находится Dockerfile)
    tty: true  # Включаем поддержку виртуального терминала для взаимодействия с контейнером
    command: celery -A config worker -l INFO -P eventlet  # Команда для запуска Celery worker
    depends_on:  # Определение зависимостей от Redis и Django-приложения
      - redis
      - app

  celery_beat:  # Сервис Celery beat
    build: .  # Сборка образа Docker из текущей директории (где находится Dockerfile)
    tty: true  # Включаем поддержку виртуального терминала для взаимодействия с контейнером
    command: celery -A config beat -l INFO  # Команда для запуска Celery beat
    depends_on:  # Определение зависимостей от Redis и Django-приложения
      - redis
      - app

volumes:  # Определение тома для данных PostgreSQL
  pg_data:

networks:  # Определение пользовательской сети drf_network
  drf_network:
    driver: bridge  # Использование bridge-драйвера для сети